# -*- coding: utf-8 -*-
"""uber case study

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ESibwSs1Xtaw5PJhQhVF2-o9jS5WiABK

#INSTALLING LIBRARIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
import seaborn as sns

# Step 1: Load the Dataset
# Note: Replace 'your_data.csv' with the actual file name or path
df = pd.read_csv('/content/Uber Request Data.csv')
print(df.head())

df

# Also convert all hardcoded NA values to python specific np.NaN using na_values
df = pd.read_csv('Uber Request Data.csv', parse_dates=[4,5], dayfirst=True, na_values="NA")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# Import the CSV with date parsing
df = pd.read_csv('Uber Request Data.csv', dayfirst=True, na_values="NA")

# Check the data types
print(df.dtypes)

# Manually convert 'Request timestamp' and 'Drop timestamp' to datetime
df['Request timestamp'] = pd.to_datetime(df['Request timestamp'], format='%d-%m-%Y %H:%M:%S', errors='coerce')
df['Drop timestamp'] = pd.to_datetime(df['Drop timestamp'], format='%d-%m-%Y %H:%M:%S', errors='coerce')

# Check if conversion was successful
print(df.dtypes)

# Extract hour from the Request timestamp
df["RequestHour"] = df["Request timestamp"].dt.hour

# Separate 5 different time slots
df["TimeSlot"] = df["RequestHour"].apply(
    lambda x: "Dawn" if x <= 4 else ("Early Morning" if x <= 9 else
    ("Noon" if x <= 16 else ("Late Evening" if x <= 21 else "Night"))))

# Distinguish Supply-Demand Gap
df["Cab Availability"] = df["Status"].apply(lambda x: "Available" if x == "Trip Completed" else "Not Available")

# Plot Frequency of Requests by Hour
plt.figure(figsize=(20, 10))
df.groupby(['RequestHour', 'Status']).size().unstack().plot(kind='bar', stacked=True)
plt.title('Frequency of Requests by Hour')
plt.xlabel('Request Hour')
plt.ylabel('Frequency')
plt.legend(title='Status')
plt.show()

# Most Problematic Types of Requests
plt.figure(figsize=(6, 6))
df.groupby(['Pickup point']).size().plot(kind="pie", autopct='%1.1f%%', startangle=90)
plt.title("Problematic Types of Requests")
plt.ylabel("")
plt.show()

# Most Problematic Time Slots
plt.figure(figsize=(6, 6))
df[df["Cab Availability"] == "Not Available"].groupby(['TimeSlot']).size().plot(kind="pie", autopct='%1.1f%%', startangle=90)
plt.title("Problematic Time Slots")
plt.ylabel("")
plt.show()

# Demand-Supply Gap from Airport to City
plt.figure(figsize=(20, 10))
df[df['Pickup point'] == "Airport"].groupby(['RequestHour', 'Status']).size().unstack().plot(kind='bar', stacked=True)
plt.title('Demand-Supply Gap from Airport to City')
plt.xlabel('Request Hour')
plt.ylabel('Frequency')
plt.legend(title='Status')
plt.show()

# Time Slots where Highest Gap Exists
plt.figure(figsize=(20, 10))
df.groupby(['TimeSlot', 'Cab Availability']).size().unstack().plot(kind='bar', stacked=True)
plt.title('Time Slots Where Highest Gap Exists')
plt.xlabel('Time Slot')
plt.ylabel('Frequency')
plt.legend(title='Cab Availability')
plt.show()

# Types of Requests During Late Evening
plt.figure(figsize=(6, 6))
df[df["TimeSlot"] == "Late Evening"].groupby(['Pickup point']).size().plot(kind="pie", autopct='%1.1f%%', startangle=90)
plt.title("Problematic Types of Requests During Late Evening")
plt.ylabel("")
plt.show()